// <auto-generated />
using GharxpertAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GharxpertAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240501113749_AddContantOurExpertTableToDb")]
    partial class AddContantOurExpertTableToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GharxpertAPI.Models.ContactOurExpert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ConstructionWork")
                        .HasColumnType("bit");

                    b.Property<bool>("Doors")
                        .HasColumnType("bit");

                    b.Property<bool>("ElectricalWork")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("FalseCeiling")
                        .HasColumnType("bit");

                    b.Property<bool>("Granite")
                        .HasColumnType("bit");

                    b.Property<string>("Landline")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("MS_And_SS_Work")
                        .HasColumnType("bit");

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Paint")
                        .HasColumnType("bit");

                    b.Property<bool>("PlumbingWork")
                        .HasColumnType("bit");

                    b.Property<bool>("Tiles")
                        .HasColumnType("bit");

                    b.Property<bool>("Windows")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ContactOurExperts");
                });

            modelBuilder.Entity("GharxpertAPI.Models.ServiceCharges", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkTypeId");

                    b.ToTable("ServiceCharges");
                });

            modelBuilder.Entity("GharxpertAPI.Models.Work", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("WorkDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WorkIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("WorkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("GharxpertAPI.Models.WorkType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("WorkDesc")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorkID")
                        .HasColumnType("int");

                    b.Property<string>("WorkImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Work_Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("WorkID");

                    b.ToTable("WorkTypes");
                });

            modelBuilder.Entity("GharxpertAPI.Models.ServiceCharges", b =>
                {
                    b.HasOne("GharxpertAPI.Models.WorkType", "WorkType")
                        .WithMany()
                        .HasForeignKey("WorkTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkType");
                });

            modelBuilder.Entity("GharxpertAPI.Models.WorkType", b =>
                {
                    b.HasOne("GharxpertAPI.Models.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Work");
                });
#pragma warning restore 612, 618
        }
    }
}
